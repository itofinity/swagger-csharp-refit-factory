/* 
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;
using Refit;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private string hostUrl = "";
        private string userAgent = "IO.Swagger.Test.UserApiTests";

        private IUserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = RestService.For<IUserApi>(hostUrl);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public async void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User body = null;
            //instance.CreateUser(userAgent, body);
            
        }
        
        /// <summary>
        /// Test CreateUsersWithArrayInput
        /// </summary>
        [Test]
        public async void CreateUsersWithArrayInputTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<User> body = null;
            //instance.CreateUsersWithArrayInput(userAgent, body);
            
        }
        
        /// <summary>
        /// Test CreateUsersWithListInput
        /// </summary>
        [Test]
        public async void CreateUsersWithListInputTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<User> body = null;
            //instance.CreateUsersWithListInput(userAgent, body);
            
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public async void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //instance.DeleteUser(userAgent, username);
            
        }
        
        /// <summary>
        /// Test GetUserByName
        /// </summary>
        [Test]
        public async void GetUserByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = await instance.GetUserByName(userAgent, username);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test LoginUser
        /// </summary>
        [Test]
        public async void LoginUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string password = null;
            //var response = await instance.LoginUser(userAgent, username, password);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test LogoutUser
        /// </summary>
        [Test]
        public async void LogoutUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.LogoutUser(userAgent);
            
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public async void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //User body = null;
            //instance.UpdateUser(userAgent, username, body);
            
        }
        
    }

}
